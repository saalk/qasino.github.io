server.port = 8080
#server.contextPath = /qasinoResponse/api

## Spring Boot only needs a couple of properties to make things work once we add the web starter
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

## Use H2
spring.datasource.url=jdbc:h2:file:C:/Qasino/ittest-database/QasinoDB\
  ;NON_KEYWORDS=DAY,YEAR\
  ;DB_CLOSE_DELAY=-1\
  ;MODE=LEGACY\
  ;AUTO_SERVER=TRUE

# AUTO_SERVER=TRUE
# You can use the same database URL independent of whether the database is already open or not.
# This feature doesn't work with in-memory databases.

spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=sa

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# recreating the schema generated by Hibernate each time
spring.jpa.defer-datasource-initialization=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.globally_quoted_identifiers=true

## get the generated DDL in h2
spring.jpa.properties.hibernate.hbm2ddl.schema-generation.script.append=false
spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=create
spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=server/webapp/docs/sql/ittest-create.sql
spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-source=metadata

## Set up H2 console
## navigate to http://localhost:8080/h2-console, which will present us with a login page.
## In the snippets, we set the console path to be /h2-console, which is relative to the address and port of our running application.
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false
