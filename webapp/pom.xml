<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>cloud.qasino.games</groupId>
		<artifactId>CardGames</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>webapp</artifactId>
	<version>2.0.0-SNAPSHOT</version>
<!--	<name>CardGamesWebApp</name>-->
	<packaging>war</packaging>

	<properties>
		<start-class>cloud.qasino.games.GamesApplication</start-class>

		<!-- 1: spring boot and web development -->
		<spring-boot.version>3.2.5</spring-boot.version>
		<enforcer.legacy.fail>false</enforcer.legacy.fail>
		<httpclient.version>4.5.14</httpclient.version>
		<thymeleaf-extras-springsecurity6.version>3.1.2.RELEASE</thymeleaf-extras-springsecurity6.version>
		<jasypt-spring-boot-starter.version>3.0.5</jasypt-spring-boot-starter.version>

		<!-- 2: database -->
		<h2.version>2.2.224</h2.version>
		<mariadb-java-client.version>2.5.2</mariadb-java-client.version>
		<tomcat-dbcp.version>9.0.1</tomcat-dbcp.version>
		<jackson-jsog.version>1.1.1</jackson-jsog.version>

		<!-- 3: utility -->
		<org.mapstruct.version>1.6.0.Beta1</org.mapstruct.version>
		<commons-collections4.version>4.4</commons-collections4.version>
		<commons-io.version>2.15.1</commons-io.version>
		<!--		<commons-text.version>1.11</commons-text.version>-->
		<commons-lang3.version>3.9</commons-lang3.version>
		<commons-text.version>1.10.0</commons-text.version>
		<lombok.version>1.18.30</lombok.version>

		<!-- 4: GraphQL dependencies -->
		<!--		<graphql-spring-boot-starter.version>5.11.1</graphql-spring-boot-starter.version>-->
		<!--		<graphiql-spring-boot-starter.version>5.11.1</graphiql-spring-boot-starter.version>-->
		<!--		<graphql-java-tools.version>5.7.1</graphql-java-tools.version>-->

		<!-- 5: readability -->
		<checkstyle-maven-plugin.version>3.2.0</checkstyle-maven-plugin.version>
		<plantuml-core.version>1.0.51</plantuml-core.version>
		<swagger-codegen-maven-plugin>2.4.39</swagger-codegen-maven-plugin>
		<version.swagger>2.3.1</version.swagger>

		<!-- 6: logging -->
		<logback-core.version>1.5.6</logback-core.version>
<!--		<logback.version>1.2.11</logback.version>-->

		<!-- 7: test -->
		<mockito-core.version>5.11.0</mockito-core.version>
		<tomakehurst-wiremock.version>2.35.1</tomakehurst-wiremock.version>
		<junit>4.13.2</junit>

		<!-- 8: maven plugins to parent pom -->
		<surefire-logger-api.version>3.2.5</surefire-logger-api.version>
		<maven-assembly-plugin.version>3.3.0</maven-assembly-plugin.version>
		<exec-maven-plugin.version>1.6.0</exec-maven-plugin.version>
		<maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
		<versions-maven-plugin.version>2.7</versions-maven-plugin.version>

	</properties>

	<!-- Dependencies are libraries that either must be included in the jar/war file or are expected to be found in
		 the container such as GlassFish -->
	<dependencies>

		<!-- refer  to library first -->
<!--		<dependency>-->
<!--			<groupId>cloud.qasino</groupId>-->
<!--			<artifactId>cloud-qasino-rules</artifactId>-->
<!--			<version>2.0.0-SNAPSHOT</version>-->
<!--		</dependency>-->

		<!-- security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-data</artifactId>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity6</artifactId>
			<version>${thymeleaf-extras-springsecurity6.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.ulisesbocchio</groupId>
			<artifactId>jasypt-spring-boot-starter</artifactId>
			<version>${jasypt-spring-boot-starter.version}</version>
		</dependency>

		<!-- 1: spring boot and web development -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<version>${spring-boot.version}</version>

			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>${spring-boot.version}</version>

		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
			<version>${spring-boot.version}</version>

		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<version>${spring-boot.version}</version>

			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
			<version>${spring-boot.version}</version>

		</dependency>

		<!-- 2: database -->
		<!-- integrate spring-boot with jpa using the default hibernate -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<version>${spring-boot.version}</version>

		</dependency>
		<!-- use H2 as a very lightweight test database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.version}</version>
			<!-- spring boot can decide version also -->
			<scope>runtime</scope>
		</dependency>
		<!-- use Tomcat JDBC Connection Pooling -->
		<!-- so don't use DriverManagerDataSource from spring any more -->
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-dbcp</artifactId>
			<version>${tomcat-dbcp.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
<!--		<dependency>-->
<!--			<groupId>org.mariadb.jdbc</groupId>-->
<!--			<artifactId>mariadb-java-client</artifactId>-->
<!--			<version>${mariadb-java-client.version}</version>-->
<!--		</dependency>-->
		<!-- resolving infinite loop problems caused by bi-directional relationships between objects -->
		<dependency>
			<groupId>com.voodoodyne.jackson.jsog</groupId>
			<artifactId>jackson-jsog</artifactId>
			<version>${jackson-jsog.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- 3: utility -->
<!--		<dependency>-->
<!--			<groupId>com.google.code.gson</groupId>-->
<!--			<artifactId>gson</artifactId>-->
<!--			<version>2.11.0</version>-->
<!--		</dependency>-->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>33.1.0-jre</version>

		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>${commons-collections4.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-text</artifactId>
			<version>${commons-text.version}</version>
		</dependency>
		<!-- io for card pictures -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
			<version>${lombok.version}</version>
		</dependency>

		<!-- 4: GraphQL dependencies -->
		<!--		<dependency>-->
		<!--			<groupId>com.graphql-java-kickstart</groupId>-->
		<!--			&lt;!&ndash; GraphQL core &ndash;&gt;-->
		<!--			<artifactId>graphql-spring-boot-starter</artifactId>-->
		<!--			<version>${graphql-spring-boot-starter.version}</version>-->
		<!--		</dependency>-->
		<!--		<dependency>-->
		<!--			<groupId>com.graphql-java-kickstart</groupId>-->
		<!--			&lt;!&ndash; to embed GraphiQL tool &ndash;&gt;-->
		<!--			<artifactId>graphiql-spring-boot-starter</artifactId>-->
		<!--			<version>${graphiql-spring-boot-starter.version}</version>-->
		<!--			<scope>runtime</scope>-->
		<!--		</dependency>-->
		<!--		<dependency>-->
		<!--			<groupId>com.graphql-java-kickstart</groupId>-->
		<!--			&lt;!&ndash; use the GraphQL schema language to build your graphql-java schema &ndash;&gt;-->
		<!--			<artifactId>graphql-java-tools</artifactId>-->
		<!--			<version>${graphql-java-tools.version}</version>-->
		<!--		</dependency>-->

		<!-- 5: readability -->
<!--		<dependency>-->
<!--			<groupId>io.springfox</groupId>-->
<!--			<artifactId>springfox-swagger2</artifactId>-->
<!--			<version>3.0.0</version>-->
<!--		</dependency>-->
<!--		<dependency>-->
<!--			<groupId>io.springfox</groupId>-->
<!--			<artifactId>springfox-boot-starter</artifactId>-->
<!--			<version>3.0.0</version>-->
<!--		</dependency>-->
<!--		<dependency>-->
<!--			<groupId>io.springfox</groupId>-->
<!--			<artifactId>springfox-swagger-ui</artifactId>-->
<!--			<version>3.0.0</version>-->
<!--		</dependency>-->
		<dependency>
			<groupId>com.credibledoc</groupId>
			<artifactId>plantuml-core</artifactId>
			<version>1.0.51</version>
		</dependency>
		<!--		<dependency>-->
		<!--			<groupId>net.sourceforge.plantuml</groupId>-->
		<!--			<artifactId>plantuml</artifactId>-->
		<!--			<version>${plantuml.version}</version>-->
		<!--		</dependency>-->

		<!-- 6: logging -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback-core.version}</version>
		</dependency>

		<!-- 7: test -->
		<dependency>
			<groupId>com.github.tomakehurst</groupId>
			<artifactId>wiremock-jre8</artifactId>
			<version>${tomakehurst-wiremock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.hamcrest</groupId>
					<artifactId>hamcrest-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito-core.version}</version>
			<!--scope>test</scope>-->
		</dependency>
		<!-- testing with http -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${httpclient.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit}</version>
			<scope>test</scope>
		</dependency>

		<!-- 8: maven plugins -->
		<dependency>
			<groupId>org.apache.maven.surefire</groupId>
			<artifactId>surefire-logger-api</artifactId>
			<version>${surefire-logger-api.version}</version>
			<!-- to get around bug https://github.com/junit-team/junit5/issues/801 -->
			<scope>test</scope>
			<optional>true</optional>
		</dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

    </dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals><goal>copy</goal></goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.heroku</groupId>
									<artifactId>webapp-runner</artifactId>
									<version>9.0.89.0</version>
									<destFileName>webapp-runner.jar</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
<!--			<plugin>-->
<!--				<groupId>org.apache.maven.plugins</groupId>-->
<!--				<artifactId>maven-checkstyle-plugin</artifactId>-->
<!--				<version>${checkstyle-maven-plugin.version}</version>-->
<!--				<executions>-->
<!--					<execution>-->
<!--						<phase>validate</phase>-->
<!--						<goals>-->
<!--							<goal>check</goal>-->
<!--						</goals>-->
<!--					</execution>-->
<!--				</executions>-->
<!--				<configuration>-->
<!--					<configLocation>google_checks.xml</configLocation>-->
<!--					<consoleOutput>false</consoleOutput>-->
<!--					<failsOnError>false</failsOnError>-->
<!--					<failOnViolation>false</failOnViolation>-->
<!--					<includeTestSourceDirectory>true</includeTestSourceDirectory>-->
<!--					<excludes>**/target/**/*</excludes>-->
<!--				</configuration>-->
<!--			</plugin>-->
			<!-- tell Maven to copy the jar files that your app depends on to
			the target/dependency directory.-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.0.1</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals><goal>copy-dependencies</goal></goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>

				<!-- used dev when spring-boot:run is executed -->
				<configuration>
					<profiles>
						<profile>dev</profile>
						<excludeDevtools>false</excludeDevtools>
					</profiles>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- The MojoHaus project is a collection of plugins for Apache Maven 2 & 3 -->
			<plugin>
				<!-- when you want to manage the versions of artifacts in a project's POM -->
				<!-- mvn versions:display-plugin-updates -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>${versions-maven-plugin.version}</version>
				<configuration>
					<generateBackupPoms>false</generateBackupPoms>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${exec-maven-plugin.version}</version>
				<configuration>
					<executable>maven</executable>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<compilerArgs>
						<arg>-Xlint:unchecked</arg>
					</compilerArgs>
					<source>17</source>
					<target>17</target>
					<annotationProcessorPaths>
						<!-- The order of the processors is important.-->
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${org.mapstruct.version}</version>
						</path>
						<!-- other annotation processors -->
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<!--separating it and unit tests directories-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>process-resources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-integration-test-resource</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>src/it/resources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<spring.profiles.active>prd</spring.profiles.active>
			</properties>
		</profile>
	</profiles>
</project>
